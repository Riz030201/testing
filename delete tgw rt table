Sure! Below is the updated Boto3 script that assumes an IAM role via STS and deletes unassociated route tables across multiple AWS accounts and regions.

I’ve used red text (\033[91m) to highlight dummy AWS account IDs and IAM role ARNs for easy replacement.

⸻

🚀 Script: Delete Unassociated Route Tables Using STS Role

import boto3
from botocore.exceptions import NoCredentialsError, PartialCredentialsError

# AWS Accounts and IAM role ARN to assume in each account
AWS_ACCOUNTS = {
    "\033[91m111122223333\033[0m": "\033[91marn:aws:iam::111122223333:role/CrossAccountDeleteRole\033[0m",  # 🔺 Replace with actual AWS Account ID & IAM Role
    "\033[91m444455556666\033[0m": "\033[91marn:aws:iam::444455556666:role/CrossAccountDeleteRole\033[0m"   # 🔺 Replace accordingly
}

# AWS Regions to scan
REGIONS = ["us-east-1", "us-west-2"]  # Replace with required AWS regions

def assume_role(account_id, role_arn):
    """Assumes an IAM role in the target AWS account and returns a temporary session."""
    sts_client = boto3.client("sts")
    try:
        assumed_role = sts_client.assume_role(
            RoleArn=role_arn,
            RoleSessionName="AssumeRoleSession"
        )

        credentials = assumed_role["Credentials"]

        return boto3.Session(
            aws_access_key_id=credentials["AccessKeyId"],
            aws_secret_access_key=credentials["SecretAccessKey"],
            aws_session_token=credentials["SessionToken"]
        )
    except Exception as e:
        print(f"❌ Error assuming role for account {account_id}: {str(e)}")
        return None

def get_unassociated_route_tables(session, region):
    """Finds unassociated route tables in the given AWS region."""
    ec2_client = session.client("ec2", region_name=region)
    try:
        response = ec2_client.describe_route_tables()
        unassociated_tables = []

        for rt in response["RouteTables"]:
            # Check if there are any associations
            if "Associations" in rt and not any(assoc.get("Main", False) for assoc in rt["Associations"]):
                if not rt["Associations"]:  # If Associations list is empty
                    unassociated_tables.append(rt["RouteTableId"])
        
        return unassociated_tables
    except Exception as e:
        print(f"Error retrieving route tables in region {region}: {str(e)}")
        return []

def delete_route_table(session, region, route_table_id):
    """Deletes a specified route table."""
    ec2_client = session.client("ec2", region_name=region)
    try:
        ec2_client.delete_route_table(RouteTableId=route_table_id)
        print(f"✅ Successfully deleted route table: {route_table_id} in {region}")
    except Exception as e:
        print(f"❌ Failed to delete {route_table_id} in {region}: {str(e)}")

def main():
    """Finds and deletes unassociated route tables across multiple AWS accounts and regions using IAM role assumption."""
    for account_id, role_arn in AWS_ACCOUNTS.items():
        print(f"\n🔎 Checking AWS Account: \033[91m{account_id}\033[0m")

        # Assume role for the target account
        session = assume_role(account_id, role_arn)
        if not session:
            continue  # Skip if role assumption failed

        for region in REGIONS:
            print(f"\n➡️ Scanning region: {region}")
            unassociated_tables = get_unassociated_route_tables(session, region)

            if unassociated_tables:
                print(f"Unassociated Route Tables in {region}: {unassociated_tables}")

                # Ask user confirmation before deletion
                confirm = input(f"Do you want to delete these route tables in {region}? (yes/no): ").strip().lower()
                if confirm == "yes":
                    for rtb_id in unassociated_tables:
                        delete_route_table(session, region, rtb_id)
                else:
                    print("Skipping deletion.")
            else:
                print(f"No unassociated route tables found in {region}.")

if __name__ == "__main__":
    main()



⸻

🛠️ What This Script Does
	1.	Assumes an IAM role (sts:AssumeRole) for each AWS account.
	2.	Finds unassociated route tables across multiple regions.
	3.	Asks for user confirmation before deleting the unassociated route tables.
	4.	Deletes the route tables if the user confirms.
	5.	Uses ANSI Red (\033[91m) to highlight dummy AWS account IDs and IAM roles.

⸻

🔐 IAM Role Setup

You need to create an IAM role in each AWS account with the following policies:

✅ Trust Policy (For Cross-Account STS Access)

#Example outputs 
🔎 Checking AWS Account: 111122223333

➡️ Scanning region: us-east-1
Unassociated Route Tables in us-east-1: ['rtb-0123456789abcdef0']
Do you want to delete these route tables in us-east-1? (yes/no): yes
✅ Successfully deleted route table: rtb-0123456789abcdef0 in us-east-1

➡️ Scanning region: us-west-2
No unassociated route tables found in us-west-2.

🔎 Checking AWS Account: 444455556666

➡️ Scanning region: us-east-1
No unassociated route tables found in us-east-1.



⸻

🔥 Why Use This Approach?

✅ Uses IAM role assumption instead of AWS profiles → More secure.
✅ Works across multiple AWS accounts & regions.
✅ Asks for confirmation before deletion → Prevents accidental deletion.
✅ Only deletes unassociated route tables → No risk to active resources.
✅ Highlights dummy account IDs & roles in red for easy replacement.

Would you like additional modifications, such as logging or saving deleted tables to a file? 🚀
