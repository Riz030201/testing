import boto3

# ---- CONFIGURATION SECTION ----
accounts = ['111122223333', '444455556666']        # AWS account IDs
regions = ['us-east-1', 'us-west-2']               # AWS regions to scan
role_name = 'YourCrossAccountRoleName'             # IAM Role name to assume
security_vpc_id = 'security-vpc'                   # The VPC ID of the Security VPC (dummy)
# --------------------------------

def assume_role(account_id, role_name):
    sts = boto3.client('sts')
    role_arn = f'arn:aws:iam::{account_id}:role/{role_name}'

    try:
        response = sts.assume_role(
            RoleArn=role_arn,
            RoleSessionName='SecurityVPCAssociationSession'
        )
        return response['Credentials']
    except Exception as e:
        print(f"[ERROR] Failed to assume role in account {account_id}: {e}")
        return None

def get_ec2_client(credentials, region):
    return boto3.client(
        'ec2',
        region_name=region,
        aws_access_key_id=credentials['AccessKeyId'],
        aws_secret_access_key=credentials['SecretAccessKey'],
        aws_session_token=credentials['SessionToken']
    )

def find_security_vpc_attachment(ec2, vpc_id):
    try:
        response = ec2.describe_transit_gateway_attachments(
            Filters=[
                {'Name': 'resource-id', 'Values': [vpc_id]},
                {'Name': 'resource-type', 'Values': ['vpc']}
            ]
        )
        attachments = response.get('TransitGatewayAttachments', [])
        if attachments:
            return attachments[0]['TransitGatewayAttachmentId']
    except Exception as e:
        print(f"[ERROR] Could not find attachment for {vpc_id}: {e}")
    return None

def find_associated_tgw_route_table(ec2, attachment_id):
    try:
        response = ec2.describe_transit_gateway_route_table_associations(
            Filters=[
                {'Name': 'transit-gateway-attachment-id', 'Values': [attachment_id]}
            ]
        )
        associations = response.get('Associations', [])
        if associations:
            return associations[0]['TransitGatewayRouteTableId']
    except Exception as e:
        print(f"[ERROR] Could not get route table for attachment {attachment_id}: {e}")
    return None

def get_name_tag(tags):
    for tag in tags or []:
        if tag['Key'] == 'Name':
            return tag['Value']
    return 'N/A'

def get_propagating_vpc_details(ec2, route_table_id, exclude_vpc_id):
    try:
        # Step 1: Get propagating attachments
        paginator = ec2.get_paginator('get_transit_gateway_route_table_propagations')
        propagations = []
        for page in paginator.paginate(TransitGatewayRouteTableId=route_table_id):
            propagations.extend(page.get('TransitGatewayRouteTablePropagations', []))

        attachment_ids = [
            p['TransitGatewayAttachmentId'] for p in propagations if 'TransitGatewayAttachmentId' in p
        ]

        # Step 2: Get VPC IDs from attachments
        vpc_ids = []
        vpc_id_to_attachment = {}
        if attachment_ids:
            attachment_response = ec2.describe_transit_gateway_attachments(
                TransitGatewayAttachmentIds=attachment_ids
            )
            for att in attachment_response['TransitGatewayAttachments']:
                if att['ResourceType'] == 'vpc' and att['ResourceId'] != exclude_vpc_id:
                    vpc_ids.append(att['ResourceId'])
                    vpc_id_to_attachment[att['ResourceId']] = att['TransitGatewayAttachmentId']

        # Step 3: Get VPC CIDRs and Name
        vpcs_info = []
        if vpc_ids:
            vpcs_response = ec2.describe_vpcs(VpcIds=vpc_ids)
            for vpc in vpcs_response['Vpcs']:
                cidrs = [c['CidrBlock'] for c in vpc.get('CidrBlockAssociationSet', [])]
                name = get_name_tag(vpc.get('Tags', []))
                vpcs_info.append({
                    'VpcId': vpc['VpcId'],
                    'Name': name,
                    'CidrBlocks': cidrs
                })

        return vpcs_info
    except Exception as e:
        print(f"[ERROR] Failed to fetch VPC details: {e}")
        return []

def main():
    for account in accounts:
        credentials = assume_role(account, role_name)
        if not credentials:
            continue

        for region in regions:
            ec2 = get_ec2_client(credentials, region)

            # Step 1: Find the TGW attachment for Security VPC
            attachment_id = find_security_vpc_attachment(ec2, security_vpc_id)
            if not attachment_id:
                print(f"[INFO] No TGW attachment found for {security_vpc_id} in {account}/{region}")
                continue

            # Step 2: Get associated TGW route table
            route_table_id = find_associated_tgw_route_table(ec2, attachment_id)
            if not route_table_id:
                print(f"[INFO] No TGW route table associated with {attachment_id}")
                continue

            # Step 3: Get associated VPCs with names and CIDRs
            vpcs = get_propagating_vpc_details(ec2, route_table_id, security_vpc_id)
            for vpc in vpcs:
                print(f"[FOUND] Account: {account}, Region: {region}, "
                      f"VPC ID: {vpc['VpcId']}, Name: {vpc['Name']}, CIDRs: {', '.join(vpc['CidrBlocks'])}")

if __name__ == '__main__':
    main()
